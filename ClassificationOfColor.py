import pandas as pd
import time
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier

subtrainLabel = pd.read_csv('trainLabels.csv')
subtrainfeature = pd.read_csv("Allimgfeature.csv")
subtrain = pd.merge(subtrainLabel,subtrainfeature,on='Id')
labels = subtrain.Class
subtrain.drop(["Class","Id"], axis=1, inplace=True)
subtrain = subtrain.as_matrix()
data = open('classification_color.csv','a')

for i in range(20):

    X_train, X_test, y_train, y_test = train_test_split(subtrain,labels,test_size=0.4)

    print('%d st classisfication start' % (i))
    print('%d st classisfication ' % (i), file=data)
    start = time.clock()

    print('决策树',file=data)
    clf = DecisionTreeClassifier(random_state=11)
    clf.fit(X_train, y_train)
    predictions = clf.predict(X_test)
    print(classification_report(y_test, predictions, digits=4), file=data)

    print('逻辑回归',file=data)
    clf = LogisticRegression()
    clf.fit(X_train, y_train)
    predictions = clf.predict(X_test)
    print(classification_report(y_test, predictions, digits=4), file=data)

    print('KNN近邻',file=data)
    clf = KNeighborsClassifier(n_neighbors=3)
    clf.fit(X_train,y_train)
    predictions = clf.predict(X_test)
    print(classification_report(y_test, predictions, digits=4), file=data)

    print('XGBoost',file=data)
    clf = XGBClassifier(n_estimators=50, random_state=11)
    clf.fit(X_train, y_train)
    predictions = clf.predict(X_test)
    print(classification_report(y_test, predictions, digits=4), file=data)

    print('随机森林',file=data)
    clf = RandomForestClassifier(n_estimators=10, random_state=11)
    clf.fit(X_train, y_train)
    predictions = clf.predict(X_test)
    print(classification_report(y_test, predictions,digits=4), file=data)

    end = time.clock()
    print('time:',end-start, file=data)
    print('time:', end - start)
    print('%d st classisfication end'%(i))

data.close()
