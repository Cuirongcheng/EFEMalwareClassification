import re
from collections import *
import os
import pandas as pd
# from sklearn.externals.joblib.numpy_pickle_utils import xrange


def getOpcodeSequence(filename):
    opcode_seq = []
    print('come')
    p = re.compile(r'\s([a-fA-F0-9]{2}\s)+\s*([a-z]+)')
    print(p)
    with open(filename, encoding='gb18030', errors='ignore') as f:
        print('open')
        for line in f:
            if line.startswith(".text"):
                m = re.findall(p,line)
                print('.text')
                if m:
                    opc = m[0][1]
                    if opc != "align":
                        opcode_seq.append(opc) 
    return opcode_seq

def train_opcode_lm(ops, order=4):
    lm = defaultdict(Counter)
    prefix = ["~"] * order
    prefix.extend(ops)
    data = prefix
    for i in range(len(data)-order):
        history, char = tuple(data[i:i+order]), data[i+order]
        lm[history][char]+=1
    def normalize(counter):
        s = float(sum(counter.values()))
        return [(c,cnt/s) for c,cnt in counter.iteritems()]
    outlm = {hist:chars for hist, chars in lm.iteritems()}
    return outlm

def getOpcodeNgram(ops, n=3):
    opngramlist = [tuple(ops[i:i+n]) for i in range(len(ops)-n)]
    opngram = Counter(opngramlist)
    return opngram

# basepath = "F:\\big2015\\malware-classification\\train\\"
# map3gram = defaultdict(Counter)
# subtrain = pd.read_csv('trainLabels.csv')
# count = 1
# for sid in subtrain.Id:
#     print("counting the 3-gram of the {0} file...".format(str(count)))
#     count += 1
#     filename = basepath + sid + ".asm"
#     ops = getOpcodeSequence(filename)
#     op3gram = getOpcodeNgram(ops)
#     map3gram[sid] = op3gram
#
# cc = Counter([])
# for d in map3gram.values():
#     cc += d
# selectedfeatures = {}
# tc = 0
# for k,v in cc.items():
#     if v >= 500:
#         selectedfeatures[k] = v
#         print(k,v)
#         tc += 1
# dataframelist = []
# for fid,op3gram in map3gram.items():
#     standard = {}
#     standard["Id"] = fid
#     for feature in selectedfeatures:
#         if feature in op3gram:
#             standard[feature] = op3gram[feature]
#         else:
#             standard[feature] = 0
#     dataframelist.append(standard)
# df = pd.DataFrame(dataframelist)
# df.to_csv("All3gramfeature.csv",index=False)


if __name__ == "__main__":
    filename = 'D:\WorkSpace\APTWorkSpace\CrcMalwareClassification\dadaSample\\0A32eTdBKayjCWhZqDOQ.asm'
    ops = getOpcodeSequence(filename)
    op3gram = getOpcodeNgram(ops)
    print(ops,op3gram)